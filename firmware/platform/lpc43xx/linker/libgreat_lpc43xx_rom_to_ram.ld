/*
 * This file is part of the libopencm3 project.
 *
 * Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>
 * Copyright (C) 2012 Michael Ossmann <mike@ossmann.com>
 * Copyright (C) 2012 Benjamin Vernoux <titanmkd@gmail.com>
 * Copyright (C) 2012 Jared Boone <jared@sharebrained.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Generic linker script for LPC43XX targets using libopencm3. */

/* Memory regions must be defined in the ld script which includes this one. */

/* Enforce emmition of the vector table. */
EXTERN (vector_table)

/* Define the entry point of the output file. */
ENTRY(reset_handler)

/* Define sections. */
SECTIONS
{
	.text : {
		. = ALIGN(0x400);
        _text_segment_rom = .;
		_text_segment_ram = (. - ORIGIN(rom)) + ORIGIN(ram_local1); /* Start of Code in RAM */

		*(.vectors)	/* Vector table */
		*(.text*)	/* Program code */
		. = ALIGN(4);
		*(.rodata*)	/* Read-only data */
		. = ALIGN(4);
	} >rom

	/* FIXME: abstract these away into an include file! */

	/* C++ Static constructors/destructors, also used for __attribute__
	 * ((constructor)) and the likes */
	.preinit_array : {
		. = ALIGN(4);
		__preinit_array_start = .;
		KEEP (*(.preinit_array))
		__preinit_array_end = .;
	} >rom
	.init_array : {
		. = ALIGN(4);
		__init_array_start = .;
		KEEP (*(SORT(.init_array.*)))
		KEEP (*(.init_array))
		__init_array_end = .;
	} >rom
	.fini_array : {
		. = ALIGN(4);
		__fini_array_start = .;
		KEEP (*(.fini_array))
		KEEP (*(SORT(.fini_array.*)))
		__fini_array_end = .;
	} >rom

	/**
	 * Array of task pointers that allow us to schedule things without explicitly adding them to our main routine.
	 * Supports our simple round-robin scheduler.
	 */
	.task_array : {
		. = ALIGN(4);
		__task_array_start = .;
		KEEP (*(.task_array))
		KEEP (*(SORT(.task_array.*)))
		__task_array_end = .;
	} >rom

	/*
	 * Another section used by C++ stuff, appears when using newlib with
	 * 64bit (long long) printf support
	 */
	.ARM.extab : {
		*(.ARM.extab*)
	} >rom

	/* exception index - required due to libgcc.a issuing /0 exceptions */
	.ARM.exidx : {
		__exidx_start = .;
		*(.ARM.exidx*)
		__exidx_end = .;
	} >rom

	. = ALIGN(4);
	_text_segment_end = .;
	_text_segment_ram_end = (. - ORIGIN(rom)) + ORIGIN(ram_local1);
	_text_segment_rom_end = (. - ORIGIN(rom)) + ORIGIN(rom_flash);

	.m0 : {
		_m0_data_loadaddr = .;
		*(.m0*)
		_m0_edata_loadaddr = .;
	} >rom
	PROVIDE(_m0_data = ORIGIN(ram_m0));
	_m0_edata = ORIGIN(ram_m0) + (_m0_edata_loadaddr - _m0_data_loadaddr);


	. = ORIGIN(ram_local2);

	.data : {
		_data = .;
		*(.data*)	/* Read-write initialized data */
		. = ALIGN(4);
		_edata = .;
	} >ram_local2 AT >rom
	_data_loadaddr = LOADADDR(.data);

	_data_rom = LOADADDR (.data) + ORIGIN(rom_flash);
	_edata_rom = _data_rom + SIZEOF (.data);


    /* dynamic allocation pool */
    .bss.heap : {
		_heap = .;
        *(.bss.heap)
		*(.bss.heap*)	/* Read-write, uninitialized data */
		. = ALIGN(4);
		_eheap = .;
    } > ram_ahb

    /* persistent BSS */
    .bss.persistent : {
		_persistent_bss = .;
        *(.bss.persistent)
		*(.bss.persistent*)	/* Read-write, uninitialized data */
		. = ALIGN(4);
		_epersistent_bss = .;
    } > ram_local2

    /* non-persistent BSS */
	.bss : {
		_bss = .;
		*(.bss*)	/* Read-write zero initialized data */
		*(COMMON)
		. = ALIGN(4);
		_ebss = .;
	} >ram_local2


	/*
	 * The .eh_frame section appears to be used for C++ exception handling.
	 * You may need to fix this if you're using C++.
	 */
	/DISCARD/ : { *(.eh_frame) }

	. = ALIGN(4);
	end = .;

	/* Leave room above stack for IAP to run. */
	__StackTop = ORIGIN(ram_local2) + LENGTH(ram_local2) - 32;
	PROVIDE(_stack = __StackTop);
}
